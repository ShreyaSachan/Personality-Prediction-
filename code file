{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ShreyaSachan/Personality-Prediction-/blob/main/code%20file\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Personality Prediction Project**\n",
        "\n",
        "Name- Shreya Sachan   \n",
        "                                                       Roll no.- B20EE065"
      ],
      "metadata": {
        "id": "CiyyABOM9q-2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Table of Contents**\n",
        "1.   Intro: Personality Prediction on the MBTI dataset\n",
        "2.   Exploratory data analysis\n",
        "    *   Load the Dataset\n",
        "    *   Check for null values  \n",
        "    *   Check for total post for each type\n",
        "    *   Visualization of data\n",
        "    *   WordCloud\n",
        "3.   Text Preprocessing\n",
        "    *   Lower Casing\n",
        "    *   Removing MBTI Personality Words from the post\n",
        "    *   Removal of URLs\n",
        "    *   Removal of Punctuations\n",
        "    *   Removal of stopwords\n",
        "    *   Removal of Frequent words\n",
        "    *   Stemming\n",
        "    *   Lemmatization\n",
        "    *   Spelling Correction\n",
        "4. Feature Engineering\n",
        "    *   Label Encoding\n",
        "    *   Tfidf Vectorizer\n",
        "    *   70/30 train test split\n",
        "4.   Classical Machine Learning Models with Accuracy( Precision, Recall, F-Score )\n",
        "    *   Hyperparameter tuning for KNN using GridSearchCv \n",
        "    *   k Nearest Neighbours \n",
        "    *   Logistic Regression Classifier\n",
        "    *   Random Forests Classifier\n",
        "    *   XGB Classifier\n",
        "    *   SVM\n",
        "5.   Training and Evaluating the Deep Neural network(DNN) Model \n",
        "    *   Neural Network Model \n",
        "6. Comparing Algorithm results   \n",
        "\n"
      ],
      "metadata": {
        "id": "or1X-boJy99y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i28VKLeL8ylq",
        "outputId": "538c6560-144b-4e2d-f2c6-7b827bf852c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Intro: Personality Prediction on the MBTI dataset**\n",
        "Personality refers to a characteristic pattern of thoughts, behavior, and feelings that makes a person unique. Personality Prediction from text has become popular in Natural Language Processing(NLP).The data obtained from social media is precious to determine the user personality type.The Myers-Briggs Type Indicator (MBTI) is a well-known personality test that assigns a personality type to a user by using four traits dichotomies.In this project We particularly focused on feature engineering techniques for text data and provide an insight comparison of different Machine learning and Deep learning models. For the project we had used MBTI dataset."
      ],
      "metadata": {
        "id": "DSbArokaQ4Fw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exploratory data analysis**"
      ],
      "metadata": {
        "id": "EtWYVLBsmDBy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "path = \"/content/drive/MyDrive/prml_bonus_project_(Personality_prediction)/data.csv\"\n",
        "df = pd.read_csv(path)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "ADzlr-7w8teZ",
        "outputId": "22b7a721-c892-4d96-fe22-e463c8d595c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      type                                              posts\n",
              "0     INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...\n",
              "1     ENTP  'I'm finding the lack of me in these posts ver...\n",
              "2     INTP  'Good one  _____   https://www.youtube.com/wat...\n",
              "3     INTJ  'Dear INTP,   I enjoyed our conversation the o...\n",
              "4     ENTJ  'You're fired.|||That's another silly misconce...\n",
              "...    ...                                                ...\n",
              "8670  ISFP  'https://www.youtube.com/watch?v=t8edHB_h908||...\n",
              "8671  ENFP  'So...if this thread already exists someplace ...\n",
              "8672  INTP  'So many questions when i do these things.  I ...\n",
              "8673  INFP  'I am very conflicted right now when it comes ...\n",
              "8674  INFP  'It has been too long since I have been on per...\n",
              "\n",
              "[8675 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-36ea2cf2-2b14-4bfb-89a0-6965b3691a9a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>type</th>\n",
              "      <th>posts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>INFJ</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ENTP</td>\n",
              "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>INTP</td>\n",
              "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>INTJ</td>\n",
              "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ENTJ</td>\n",
              "      <td>'You're fired.|||That's another silly misconce...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8670</th>\n",
              "      <td>ISFP</td>\n",
              "      <td>'https://www.youtube.com/watch?v=t8edHB_h908||...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8671</th>\n",
              "      <td>ENFP</td>\n",
              "      <td>'So...if this thread already exists someplace ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8672</th>\n",
              "      <td>INTP</td>\n",
              "      <td>'So many questions when i do these things.  I ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8673</th>\n",
              "      <td>INFP</td>\n",
              "      <td>'I am very conflicted right now when it comes ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8674</th>\n",
              "      <td>INFP</td>\n",
              "      <td>'It has been too long since I have been on per...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8675 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36ea2cf2-2b14-4bfb-89a0-6965b3691a9a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-36ea2cf2-2b14-4bfb-89a0-6965b3691a9a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-36ea2cf2-2b14-4bfb-89a0-6965b3691a9a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking for null values\n",
        "df.isnull().any()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kX3gZK52u9lC",
        "outputId": "d6377bb1-918d-4d33-dffd-b8c3ea044dc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "type     False\n",
              "posts    False\n",
              "dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#classes\n",
        "import numpy as np\n",
        "types = np.unique(np.array(df['type']))\n",
        "types"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SIH7YnWsveLI",
        "outputId": "cf8f626d-8dc9-42b0-c7cd-e05147f67548"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['ENFJ', 'ENFP', 'ENTJ', 'ENTP', 'ESFJ', 'ESFP', 'ESTJ', 'ESTP',\n",
              "       'INFJ', 'INFP', 'INTJ', 'INTP', 'ISFJ', 'ISFP', 'ISTJ', 'ISTP'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Total post for each type\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "count = df['type'].value_counts()\n",
        "plt.figure(figsize=(12,4))\n",
        "sns.barplot(count.index, count.values, alpha=0.8)\n",
        "plt.xlabel('Personality types', fontsize=12)\n",
        "plt.ylabel('No. of posts availables', fontsize=12)\n",
        "plt.title('Total posts for each personality type')\n",
        "plt.show()\n",
        "\n",
        "\"\"\"\n",
        "from plot we can see that there is class imbalance problem,\n",
        "to adress this problem we will be using suitable metrics for evaluation.\n",
        "\"\"\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 371
        },
        "id": "2-oNJNrvabcC",
        "outputId": "3d259bc1-6bfa-4272-f02e-ce94ff85e52c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nfrom plot we can see that there is class imbalance problem,\\nto adress this problem we will be using suitable metrics for evaluation.\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Text Preprocessing**\n",
        "\n"
      ],
      "metadata": {
        "id": "oeRPyPyB9mtw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Lower Casing**\n",
        "\n",
        "Lower casing is a common text preprocessing technique. The idea is to convert the input text into same casing format so that 'text', 'Text' and 'TEXT' are treated the same way.\n",
        "\n",
        "This is more helpful for text featurization techniques like frequency, tfidf as it helps to combine the same words together thereby reducing the duplication and get correct counts / tfidf values.\n",
        "\n",
        "This may not be helpful when we do tasks like  Sentiment Analysis (where upper casing refers to anger and so on)."
      ],
      "metadata": {
        "id": "YYntmfYD95VV"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sVdSnh3fz8BH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "f30197da-adcc-465b-d876-6bfa853f60bd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   type                                              posts  \\\n",
              "0  INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...   \n",
              "1  ENTP  'I'm finding the lack of me in these posts ver...   \n",
              "2  INTP  'Good one  _____   https://www.youtube.com/wat...   \n",
              "3  INTJ  'Dear INTP,   I enjoyed our conversation the o...   \n",
              "4  ENTJ  'You're fired.|||That's another silly misconce...   \n",
              "\n",
              "                                 pre_processed_posts  \n",
              "0  'http://www.youtube.com/watch?v=qsxhcwe3krw|||...  \n",
              "1  'i'm finding the lack of me in these posts ver...  \n",
              "2  'good one  _____   https://www.youtube.com/wat...  \n",
              "3  'dear intp,   i enjoyed our conversation the o...  \n",
              "4  'you're fired.|||that's another silly misconce...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-90815ad6-c326-489c-937a-69068758beaa\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>type</th>\n",
              "      <th>posts</th>\n",
              "      <th>pre_processed_posts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>INFJ</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsxhcwe3krw|||...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ENTP</td>\n",
              "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
              "      <td>'i'm finding the lack of me in these posts ver...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>INTP</td>\n",
              "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
              "      <td>'good one  _____   https://www.youtube.com/wat...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>INTJ</td>\n",
              "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
              "      <td>'dear intp,   i enjoyed our conversation the o...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ENTJ</td>\n",
              "      <td>'You're fired.|||That's another silly misconce...</td>\n",
              "      <td>'you're fired.|||that's another silly misconce...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90815ad6-c326-489c-937a-69068758beaa')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-90815ad6-c326-489c-937a-69068758beaa button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-90815ad6-c326-489c-937a-69068758beaa');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "df[\"pre_processed_posts\"] = df[\"posts\"].str.lower()\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Removing MBTI Personality Words from the post**\n",
        "\n",
        "In order to get valid model accuracy estimation for unseen data."
      ],
      "metadata": {
        "id": "xvMIFDdoeW-Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "types = ['INFP' ,'INFJ', 'INTP', 'INTJ', 'ENTP', 'ENFP', 'ISTP' ,'ISFP' ,'ENTJ', 'ISTJ','ENFJ', 'ISFJ' ,'ESTP', 'ESFP' ,'ESFJ' ,'ESTJ']\n",
        "types = [p.lower() for p in types]\n",
        "\n",
        "def remove_personality_words(text):\n",
        "    #function to remove MBTI personality words \n",
        "    return \" \".join([word for word in str(text).split() if word not in types])\n",
        "\n",
        "df[\"pre_processed_posts\"] = df[\"pre_processed_posts\"].apply(lambda text: remove_personality_words(text))\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Qb-heqDFeXbk",
        "outputId": "933cf24f-7520-4a0e-8147-22dc8ee0ee04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   type                                              posts  \\\n",
              "0  INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...   \n",
              "1  ENTP  'I'm finding the lack of me in these posts ver...   \n",
              "2  INTP  'Good one  _____   https://www.youtube.com/wat...   \n",
              "3  INTJ  'Dear INTP,   I enjoyed our conversation the o...   \n",
              "4  ENTJ  'You're fired.|||That's another silly misconce...   \n",
              "\n",
              "                                 pre_processed_posts  \n",
              "0  'http://www.youtube.com/watch?v=qsxhcwe3krw|||...  \n",
              "1  'i'm finding the lack of me in these posts ver...  \n",
              "2  'good one _____ https://www.youtube.com/watch?...  \n",
              "3  'dear intp, i enjoyed our conversation the oth...  \n",
              "4  'you're fired.|||that's another silly misconce...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-999e5a07-772b-40f6-adec-7e94f56313eb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>type</th>\n",
              "      <th>posts</th>\n",
              "      <th>pre_processed_posts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>INFJ</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsxhcwe3krw|||...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ENTP</td>\n",
              "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
              "      <td>'i'm finding the lack of me in these posts ver...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>INTP</td>\n",
              "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
              "      <td>'good one _____ https://www.youtube.com/watch?...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>INTJ</td>\n",
              "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
              "      <td>'dear intp, i enjoyed our conversation the oth...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ENTJ</td>\n",
              "      <td>'You're fired.|||That's another silly misconce...</td>\n",
              "      <td>'you're fired.|||that's another silly misconce...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-999e5a07-772b-40f6-adec-7e94f56313eb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-999e5a07-772b-40f6-adec-7e94f56313eb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-999e5a07-772b-40f6-adec-7e94f56313eb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Removal of URLs**"
      ],
      "metadata": {
        "id": "l3xC8PaPmP_n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "def remove_urls(text):\n",
        "    url_pattern = re.compile(r'https?://\\S+|www\\.\\S+')\n",
        "    return url_pattern.sub(r'', text)\n",
        "\n",
        "df[\"pre_processed_posts\"] = df[\"pre_processed_posts\"].apply(lambda text: remove_urls(text))\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "oqwcU2VlmPTO",
        "outputId": "9467ecab-85aa-46bd-c34b-8c94572090a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   type                                              posts  \\\n",
              "0  INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...   \n",
              "1  ENTP  'I'm finding the lack of me in these posts ver...   \n",
              "2  INTP  'Good one  _____   https://www.youtube.com/wat...   \n",
              "3  INTJ  'Dear INTP,   I enjoyed our conversation the o...   \n",
              "4  ENTJ  'You're fired.|||That's another silly misconce...   \n",
              "\n",
              "                                 pre_processed_posts  \n",
              "0  ' and moments  sportscenter not top ten plays ...  \n",
              "1  'i'm finding the lack of me in these posts ver...  \n",
              "2  'good one _____  course, to which i say i know...  \n",
              "3  'dear intp, i enjoyed our conversation the oth...  \n",
              "4  'you're fired.|||that's another silly misconce...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d1101d48-8d05-4ced-ad38-00328a109724\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>type</th>\n",
              "      <th>posts</th>\n",
              "      <th>pre_processed_posts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>INFJ</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
              "      <td>' and moments  sportscenter not top ten plays ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ENTP</td>\n",
              "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
              "      <td>'i'm finding the lack of me in these posts ver...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>INTP</td>\n",
              "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
              "      <td>'good one _____  course, to which i say i know...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>INTJ</td>\n",
              "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
              "      <td>'dear intp, i enjoyed our conversation the oth...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ENTJ</td>\n",
              "      <td>'You're fired.|||That's another silly misconce...</td>\n",
              "      <td>'you're fired.|||that's another silly misconce...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1101d48-8d05-4ced-ad38-00328a109724')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d1101d48-8d05-4ced-ad38-00328a109724 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d1101d48-8d05-4ced-ad38-00328a109724');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Removal of Punctuations**\n",
        "\n",
        "This is again a text standardization process that will help to treat 'hurray' and 'hurray!' in the same way.\n",
        "But for our case some symbols like \"!\" may be helpful for personality prediction.\n",
        "The string.punctuation in python contains the following punctuation symbols  **!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_{|}~`**.We can add or remove more punctuations as per our need."
      ],
      "metadata": {
        "id": "B8IQGyV9AOK9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import string\n",
        "print(string.punctuation)\n",
        "\n",
        "def remove_punctuation(text):\n",
        "    #function to remove the punctuation\n",
        "    return text.translate(str.maketrans(' ', ' ', string.punctuation))\n",
        "\n",
        "df[\"pre_processed_posts\"] = df[\"pre_processed_posts\"].apply(lambda text: remove_punctuation(text))\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "xT-yQifiAC5w",
        "outputId": "4690a41e-a670-493e-f1a3-7889d809db51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   type                                              posts  \\\n",
              "0  INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...   \n",
              "1  ENTP  'I'm finding the lack of me in these posts ver...   \n",
              "2  INTP  'Good one  _____   https://www.youtube.com/wat...   \n",
              "3  INTJ  'Dear INTP,   I enjoyed our conversation the o...   \n",
              "4  ENTJ  'You're fired.|||That's another silly misconce...   \n",
              "\n",
              "                                 pre_processed_posts  \n",
              "0   and moments  sportscenter not top ten plays  ...  \n",
              "1  im finding the lack of me in these posts very ...  \n",
              "2  good one   course to which i say i know thats ...  \n",
              "3  dear intp i enjoyed our conversation the other...  \n",
              "4  youre firedthats another silly misconception t...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dfa99639-350a-4ae7-a9d4-3b0d189758e8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>type</th>\n",
              "      <th>posts</th>\n",
              "      <th>pre_processed_posts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>INFJ</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
              "      <td>and moments  sportscenter not top ten plays  ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ENTP</td>\n",
              "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
              "      <td>im finding the lack of me in these posts very ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>INTP</td>\n",
              "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
              "      <td>good one   course to which i say i know thats ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>INTJ</td>\n",
              "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
              "      <td>dear intp i enjoyed our conversation the other...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ENTJ</td>\n",
              "      <td>'You're fired.|||That's another silly misconce...</td>\n",
              "      <td>youre firedthats another silly misconception t...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dfa99639-350a-4ae7-a9d4-3b0d189758e8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dfa99639-350a-4ae7-a9d4-3b0d189758e8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dfa99639-350a-4ae7-a9d4-3b0d189758e8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Removal of stopwords**\n",
        "\n",
        "Stopwords are commonly occuring words in a language like 'the', 'a' and so on. They can be removed from the text most of the times, as they don't provide valuable information for downstream analysis. \n",
        "We can safely use them, the stopword list for english language from the nltk package."
      ],
      "metadata": {
        "id": "hJPEQ2VBDRkc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "\n",
        "from nltk.corpus import stopwords\n",
        "print(\", \".join(stopwords.words('english')))\n",
        "\n",
        "Stopwords = set(stopwords.words('english'))\n",
        "def remove_stopwords(text):\n",
        "    #function to remove the stopwords\n",
        "    return \" \".join([word for word in str(text).split() if word not in Stopwords])\n",
        "\n",
        "df[\"pre_processed_posts\"] = df[\"pre_processed_posts\"].apply(lambda text: remove_stopwords(text))\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 278
        },
        "id": "aDv0UKwDEDFt",
        "outputId": "2df0fcbe-9ddf-4537-8d9d-a32075403cda"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "i, me, my, myself, we, our, ours, ourselves, you, you're, you've, you'll, you'd, your, yours, yourself, yourselves, he, him, his, himself, she, she's, her, hers, herself, it, it's, its, itself, they, them, their, theirs, themselves, what, which, who, whom, this, that, that'll, these, those, am, is, are, was, were, be, been, being, have, has, had, having, do, does, did, doing, a, an, the, and, but, if, or, because, as, until, while, of, at, by, for, with, about, against, between, into, through, during, before, after, above, below, to, from, up, down, in, out, on, off, over, under, again, further, then, once, here, there, when, where, why, how, all, any, both, each, few, more, most, other, some, such, no, nor, not, only, own, same, so, than, too, very, s, t, can, will, just, don, don't, should, should've, now, d, ll, m, o, re, ve, y, ain, aren, aren't, couldn, couldn't, didn, didn't, doesn, doesn't, hadn, hadn't, hasn, hasn't, haven, haven't, isn, isn't, ma, mightn, mightn't, mustn, mustn't, needn, needn't, shan, shan't, shouldn, shouldn't, wasn, wasn't, weren, weren't, won, won't, wouldn, wouldn't\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   type                                              posts  \\\n",
              "0  INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...   \n",
              "1  ENTP  'I'm finding the lack of me in these posts ver...   \n",
              "2  INTP  'Good one  _____   https://www.youtube.com/wat...   \n",
              "3  INTJ  'Dear INTP,   I enjoyed our conversation the o...   \n",
              "4  ENTJ  'You're fired.|||That's another silly misconce...   \n",
              "\n",
              "                                 pre_processed_posts  \n",
              "0  moments sportscenter top ten plays prankswhat ...  \n",
              "1  im finding lack posts alarmingsex boring posit...  \n",
              "2  good one course say know thats blessing cursed...  \n",
              "3  dear intp enjoyed conversation day esoteric ga...  \n",
              "4  youre firedthats another silly misconception a...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9a142d00-43ab-46d8-bd7c-a793b29e8ac8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>type</th>\n",
              "      <th>posts</th>\n",
              "      <th>pre_processed_posts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>INFJ</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
              "      <td>moments sportscenter top ten plays prankswhat ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ENTP</td>\n",
              "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
              "      <td>im finding lack posts alarmingsex boring posit...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>INTP</td>\n",
              "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
              "      <td>good one course say know thats blessing cursed...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>INTJ</td>\n",
              "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
              "      <td>dear intp enjoyed conversation day esoteric ga...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ENTJ</td>\n",
              "      <td>'You're fired.|||That's another silly misconce...</td>\n",
              "      <td>youre firedthats another silly misconception a...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a142d00-43ab-46d8-bd7c-a793b29e8ac8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9a142d00-43ab-46d8-bd7c-a793b29e8ac8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9a142d00-43ab-46d8-bd7c-a793b29e8ac8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Removal of Frequent words**\n",
        "\n",
        "In corpus, we might have some frequent words which are of not so much importance to us. So we can remove the frequent words from corpus.\n",
        "(Tfidf automatically take care of it).\n",
        "Let's get the some common words and remove them."
      ],
      "metadata": {
        "id": "s9Xu6RZEJ1dV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#most frequent words\n",
        "from collections import Counter\n",
        "count = Counter()\n",
        "for text in df[\"pre_processed_posts\"].values:\n",
        "    for word in text.split():\n",
        "        count[word] += 1     \n",
        "print(count.most_common(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_40h3Q3ecLUo",
        "outputId": "310b2ec2-43e1-4b22-92f6-77d27c2fd55b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('like', 67119), ('im', 65054), ('dont', 50658), ('think', 48630), ('people', 44078), ('know', 35684), ('really', 34019), ('would', 33718), ('one', 33654), ('get', 29911)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plotting the most common words with WordCloud\n",
        "import wordcloud\n",
        "from wordcloud import WordCloud, STOPWORDS\n",
        "\n",
        "words = []\n",
        "for i in count.most_common(40):\n",
        "  words.append(i[0])\n",
        "wc = wordcloud.WordCloud(width=600, height=500, \n",
        "                         collocations=False, background_color=\"black\", \n",
        "                         colormap=\"tab20b\").generate(\" \".join(words))\n",
        "\n",
        "# collocations to False  is set to ensure that the word cloud doesn't appear as if it contains any duplicate words\n",
        "plt.figure(figsize=(25,10))\n",
        "# generate word cloud, interpolation \n",
        "plt.imshow(wc, interpolation='bilinear')\n",
        "_ = plt.axis(\"off\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 575
        },
        "id": "hjgn8LusbeWO",
        "outputId": "60960c63-b785-465b-a89e-96a647c0648a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#removing top 10 frequent words \n",
        "Frequent_words = set([word for (word, word_count) in count.most_common(10)])\n",
        "def remove_freqwords(text):\n",
        "    \"\"\"function to remove the frequent words\"\"\"\n",
        "    return \" \".join([word for word in str(text).split() if word not in Frequent_words])\n",
        "\n",
        "df[\"pre_processed_posts\"] = df[\"pre_processed_posts\"].apply(lambda text: remove_freqwords(text))\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "wDPGIptTJcfw",
        "outputId": "56aa9360-aa0c-4691-842d-2b2e3f98f175"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   type                                              posts  \\\n",
              "0  INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...   \n",
              "1  ENTP  'I'm finding the lack of me in these posts ver...   \n",
              "2  INTP  'Good one  _____   https://www.youtube.com/wat...   \n",
              "3  INTJ  'Dear INTP,   I enjoyed our conversation the o...   \n",
              "4  ENTJ  'You're fired.|||That's another silly misconce...   \n",
              "\n",
              "                                 pre_processed_posts  \n",
              "0  moments sportscenter top ten plays prankswhat ...  \n",
              "1  finding lack posts alarmingsex boring position...  \n",
              "2  good course say thats blessing cursedoes absol...  \n",
              "3  dear intp enjoyed conversation day esoteric ga...  \n",
              "4  youre firedthats another silly misconception a...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7ebfaa5e-5450-40cf-a104-bc347111418e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>type</th>\n",
              "      <th>posts</th>\n",
              "      <th>pre_processed_posts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>INFJ</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
              "      <td>moments sportscenter top ten plays prankswhat ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ENTP</td>\n",
              "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
              "      <td>finding lack posts alarmingsex boring position...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>INTP</td>\n",
              "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
              "      <td>good course say thats blessing cursedoes absol...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>INTJ</td>\n",
              "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
              "      <td>dear intp enjoyed conversation day esoteric ga...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ENTJ</td>\n",
              "      <td>'You're fired.|||That's another silly misconce...</td>\n",
              "      <td>youre firedthats another silly misconception a...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ebfaa5e-5450-40cf-a104-bc347111418e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7ebfaa5e-5450-40cf-a104-bc347111418e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7ebfaa5e-5450-40cf-a104-bc347111418e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Stemming**\n",
        "\n",
        "Stemming is the process of reducing inflected or derived words to their word stem, base or root form. \n",
        "For example, walks and walking, stemming will stem the suffix to make them walk.\n",
        "\n",
        "There are several type of stemming algorithms. We will use porter stemmer from nltk package."
      ],
      "metadata": {
        "id": "CTmssUVXM23z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "from nltk.stem.porter import PorterStemmer\n",
        "\n",
        "stemmer = PorterStemmer()\n",
        "def stem_words(text):\n",
        "    return \" \".join([stemmer.stem(word) for word in text.split()])\n",
        "\n",
        "df[\"pre_processed_posts\"] = df[\"pre_processed_posts\"].apply(lambda text: stem_words(text))\n",
        "df.head()\n",
        "\"\"\"\n",
        "\n",
        "# Here we saw for 'silly' after stemming it became 'silli'. \n",
        "# Words like private, propose have their e at the end chopped off due to stemming."
      ],
      "metadata": {
        "id": "_ZuG60NsLPQs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "outputId": "c92ddbbb-8f01-4464-ad4f-f4bc8a5c3081"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nfrom nltk.stem.porter import PorterStemmer\\n\\nstemmer = PorterStemmer()\\ndef stem_words(text):\\n    return \" \".join([stemmer.stem(word) for word in text.split()])\\n\\ndf[\"pre_processed_posts\"] = df[\"pre_processed_posts\"].apply(lambda text: stem_words(text))\\ndf.head()\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Lemmatization**\n",
        "\n",
        "Lemmatization is similar to stemming in reducing inflected words to their word stem but differs in the way that it makes sure the root word/lemma belongs to the language. \n",
        "It is generally slower than stemming process. Here we are desiring better results so we will be using Lemmatization over Stemming. "
      ],
      "metadata": {
        "id": "8r36jf65fFXH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nltk.download('wordnet')\n",
        "nltk.download('averaged_perceptron_tagger')\n",
        "from nltk.corpus import wordnet\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "\n",
        "lemmatizer = WordNetLemmatizer()\n",
        "#lemmatization process depends on the POS tag to come up with the correct lemma.\n",
        "wordnet_map = {\"N\":wordnet.NOUN, \"V\":wordnet.VERB, \"J\":wordnet.ADJ, \"R\":wordnet.ADV}  \n",
        "def lemmatize_words(text):\n",
        "    pos_tagged_text = nltk.pos_tag(text.split())\n",
        "    return \" \".join([lemmatizer.lemmatize(word, wordnet_map.get(pos[0], wordnet.NOUN)) for word, pos in pos_tagged_text])\n",
        "\n",
        "df[\"pre_processed_posts\"] = df[\"pre_processed_posts\"].apply(lambda text: lemmatize_words(text))\n",
        "df.head()\n",
        "#took time but result was far better than stemming."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "actSBh9Ug4yL",
        "outputId": "8c29c643-8ca7-4e9b-9f86-ca1b777c2677"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/wordnet.zip.\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   type                                              posts  \\\n",
              "0  INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...   \n",
              "1  ENTP  'I'm finding the lack of me in these posts ver...   \n",
              "2  INTP  'Good one  _____   https://www.youtube.com/wat...   \n",
              "3  INTJ  'Dear INTP,   I enjoyed our conversation the o...   \n",
              "4  ENTJ  'You're fired.|||That's another silly misconce...   \n",
              "\n",
              "                                 pre_processed_posts  \n",
              "0  moment sportscenter top ten play prankswhat li...  \n",
              "1  find lack post alarmingsex boring position oft...  \n",
              "2  good course say thats bless cursedoes absolute...  \n",
              "3  dear intp enjoy conversation day esoteric gabb...  \n",
              "4  youre firedthats another silly misconception a...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c96a99ee-9c7f-43c8-9583-b754f423632a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>type</th>\n",
              "      <th>posts</th>\n",
              "      <th>pre_processed_posts</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>INFJ</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
              "      <td>moment sportscenter top ten play prankswhat li...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ENTP</td>\n",
              "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
              "      <td>find lack post alarmingsex boring position oft...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>INTP</td>\n",
              "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
              "      <td>good course say thats bless cursedoes absolute...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>INTJ</td>\n",
              "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
              "      <td>dear intp enjoy conversation day esoteric gabb...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ENTJ</td>\n",
              "      <td>'You're fired.|||That's another silly misconce...</td>\n",
              "      <td>youre firedthats another silly misconception a...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c96a99ee-9c7f-43c8-9583-b754f423632a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c96a99ee-9c7f-43c8-9583-b754f423632a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c96a99ee-9c7f-43c8-9583-b754f423632a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Spelling Correction**\n",
        "\n",
        "Typos are common in text data and we want to correct those spelling mistakes before we do our analysis."
      ],
      "metadata": {
        "id": "pgpvddw5nW2q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#!pip install pyspellchecker"
      ],
      "metadata": {
        "id": "1-N_8_bEnoPn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        "from spellchecker import SpellChecker\n",
        "\n",
        "spell = SpellChecker()\n",
        "def correct_spellings(text):\n",
        "    corrected_text = []\n",
        "    misspelled_words = spell.unknown(text.split())\n",
        "    for word in text.split():\n",
        "        if word in misspelled_words:\n",
        "            corrected_text.append(spell.correction(word))\n",
        "        else:\n",
        "            corrected_text.append(word)\n",
        "    return \" \".join(corrected_text)\n",
        "        \n",
        "df[\"pre_processed_posts\"] = df[\"pre_processed_posts\"].apply(lambda text: correct_spellings(text))\n",
        "df.head()\n",
        "\"\"\"\n",
        "#was consuming a lot of time "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "id": "8B00AtQUnq3o",
        "outputId": "620461ab-9295-48a1-8fd1-3d1d65cc6df7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nfrom spellchecker import SpellChecker\\n\\nspell = SpellChecker()\\ndef correct_spellings(text):\\n    corrected_text = []\\n    misspelled_words = spell.unknown(text.split())\\n    for word in text.split():\\n        if word in misspelled_words:\\n            corrected_text.append(spell.correction(word))\\n        else:\\n            corrected_text.append(word)\\n    return \" \".join(corrected_text)\\n        \\ndf[\"pre_processed_posts\"] = df[\"pre_processed_posts\"].apply(lambda text: correct_spellings(text))\\ndf.head()\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Feature Engineering**"
      ],
      "metadata": {
        "id": "3iaX-Mc8lyiE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Label Encoding types\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "enc = LabelEncoder()\n",
        "df['classes'] = enc.fit_transform(df['type'])\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "jQdIW9QssmZ1",
        "outputId": "8346902b-8121-463d-d33e-3fd311e34ce2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   type                                              posts  \\\n",
              "0  INFJ  'http://www.youtube.com/watch?v=qsXHcwe3krw|||...   \n",
              "1  ENTP  'I'm finding the lack of me in these posts ver...   \n",
              "2  INTP  'Good one  _____   https://www.youtube.com/wat...   \n",
              "3  INTJ  'Dear INTP,   I enjoyed our conversation the o...   \n",
              "4  ENTJ  'You're fired.|||That's another silly misconce...   \n",
              "\n",
              "                                 pre_processed_posts  classes  \n",
              "0  moment sportscenter top ten play prankswhat li...        8  \n",
              "1  find lack post alarmingsex boring position oft...        3  \n",
              "2  good course say thats bless cursedoes absolute...       11  \n",
              "3  dear intp enjoy conversation day esoteric gabb...       10  \n",
              "4  youre firedthats another silly misconception a...        2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bf529cb0-e235-4231-873e-4848c21b3dd9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>type</th>\n",
              "      <th>posts</th>\n",
              "      <th>pre_processed_posts</th>\n",
              "      <th>classes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>INFJ</td>\n",
              "      <td>'http://www.youtube.com/watch?v=qsXHcwe3krw|||...</td>\n",
              "      <td>moment sportscenter top ten play prankswhat li...</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ENTP</td>\n",
              "      <td>'I'm finding the lack of me in these posts ver...</td>\n",
              "      <td>find lack post alarmingsex boring position oft...</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>INTP</td>\n",
              "      <td>'Good one  _____   https://www.youtube.com/wat...</td>\n",
              "      <td>good course say thats bless cursedoes absolute...</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>INTJ</td>\n",
              "      <td>'Dear INTP,   I enjoyed our conversation the o...</td>\n",
              "      <td>dear intp enjoy conversation day esoteric gabb...</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ENTJ</td>\n",
              "      <td>'You're fired.|||That's another silly misconce...</td>\n",
              "      <td>youre firedthats another silly misconception a...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bf529cb0-e235-4231-873e-4848c21b3dd9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bf529cb0-e235-4231-873e-4848c21b3dd9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bf529cb0-e235-4231-873e-4848c21b3dd9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y = df['classes']\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WF48FeiHtW8x",
        "outputId": "5df270a2-ff9b-40ee-97ce-ac95f53231f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        8\n",
              "1        3\n",
              "2       11\n",
              "3       10\n",
              "4        2\n",
              "        ..\n",
              "8670    13\n",
              "8671     1\n",
              "8672    11\n",
              "8673     9\n",
              "8674     9\n",
              "Name: classes, Length: 8675, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Vectorizing the posts for the model\n",
        "#Converting posts into numerical form by using TfidfVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "vectorizer = TfidfVectorizer(max_features = 1000)\n",
        "X = vectorizer.fit_transform(df[\"pre_processed_posts\"])\n",
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W4xaW-zerzie",
        "outputId": "42f7c4db-f03a-4f89-e5e2-653ea3ff39f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<8675x1000 sparse matrix of type '<class 'numpy.float64'>'\n",
              "\twith 1949307 stored elements in Compressed Sparse Row format>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#splitting data into test and train\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y, random_state=42)\n",
        "print ((X_train.shape),(y_train.shape),(X_test.shape),(y_test.shape))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tyv16YvPo1UV",
        "outputId": "5c8ce5c0-13b6-4481-b3b2-2365bf92a33a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(6072, 1000) (6072,) (2603, 1000) (2603,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test = X_test.toarray()\n",
        "X_train = X_train.toarray()"
      ],
      "metadata": {
        "id": "aeXxZbmSc9w7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Training Models**"
      ],
      "metadata": {
        "id": "pxpNEwgrtwPt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Machine Learning Models"
      ],
      "metadata": {
        "id": "LfBUu_ijt8vh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Ignore  warning\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error, accuracy_score, balanced_accuracy_score\n",
        "from sklearn.metrics import precision_score, recall_score, f1_score, multilabel_confusion_matrix, confusion_matrix\n",
        "from sklearn.metrics import classification_report"
      ],
      "metadata": {
        "id": "j-vt7ESTwc9U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Random Forest Classifier**"
      ],
      "metadata": {
        "id": "8FdJPU9qw6LU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Random Forest\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rf = RandomForestClassifier(n_estimators=500) # we tried different n_estimators values\n",
        "rf.fit(X_train, y_train)\n",
        "y_pred = rf.predict(X_test)\n",
        "pred = [round(value) for value in y_pred]\n",
        "rf_accuracy = accuracy_score(y_test, pred)\n",
        "print(\"Accuracy: %.2f%%\" % (rf_accuracy * 100.0))\n",
        "print(\"Classification Report: \\n\")\n",
        "print(classification_report(y_test, pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "40MBVPiftrBq",
        "outputId": "73f6c28c-49dd-4257-94e8-cc4fa8e7d978"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 51.94%\n",
            "Classification Report: \n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.00      0.00      0.00        57\n",
            "           1       0.68      0.31      0.43       203\n",
            "           2       0.75      0.04      0.08        69\n",
            "           3       0.68      0.38      0.49       206\n",
            "           4       0.00      0.00      0.00        13\n",
            "           5       0.00      0.00      0.00        14\n",
            "           6       0.00      0.00      0.00        12\n",
            "           7       0.00      0.00      0.00        27\n",
            "           8       0.53      0.65      0.58       441\n",
            "           9       0.44      0.83      0.58       550\n",
            "          10       0.58      0.52      0.55       327\n",
            "          11       0.54      0.69      0.61       391\n",
            "          12       0.00      0.00      0.00        50\n",
            "          13       0.00      0.00      0.00        81\n",
            "          14       0.00      0.00      0.00        61\n",
            "          15       0.81      0.25      0.38       101\n",
            "\n",
            "    accuracy                           0.52      2603\n",
            "   macro avg       0.31      0.23      0.23      2603\n",
            "weighted avg       0.50      0.52      0.47      2603\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Logistic Regression Classifier**"
      ],
      "metadata": {
        "id": "QmCOEKLKxBWZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "lc = LogisticRegression()\n",
        "lc.fit(X_train, y_train)\n",
        "y_pred = lc.predict(X_test)\n",
        "pred = [round(value) for value in y_pred]\n",
        "lc_accuracy = accuracy_score(y_test, pred)\n",
        "print(\"Accuracy: %.2f%%\" % (lc_accuracy * 100.0))\n",
        "print(\"Classification Report: \\n\")\n",
        "print(classification_report(y_test, pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hEXWYmD4uW_7",
        "outputId": "195e802d-d396-4ad0-cea4-6a88d41d55f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 54.05%\n",
            "Classification Report: \n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.73      0.14      0.24        57\n",
            "           1       0.60      0.42      0.50       203\n",
            "           2       0.67      0.12      0.20        69\n",
            "           3       0.57      0.45      0.50       206\n",
            "           4       0.00      0.00      0.00        13\n",
            "           5       0.00      0.00      0.00        14\n",
            "           6       0.00      0.00      0.00        12\n",
            "           7       0.00      0.00      0.00        27\n",
            "           8       0.53      0.66      0.59       441\n",
            "           9       0.52      0.77      0.62       550\n",
            "          10       0.54      0.56      0.55       327\n",
            "          11       0.53      0.70      0.60       391\n",
            "          12       0.00      0.00      0.00        50\n",
            "          13       0.86      0.07      0.14        81\n",
            "          14       0.44      0.07      0.11        61\n",
            "          15       0.67      0.34      0.45       101\n",
            "\n",
            "    accuracy                           0.54      2603\n",
            "   macro avg       0.42      0.27      0.28      2603\n",
            "weighted avg       0.54      0.54      0.50      2603\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**K Neighbors Classifier**"
      ],
      "metadata": {
        "id": "F-yVMEKqxGuD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Hyperparameter tuning for KNN using GridSearchCv\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "n_neighbors = list(range(1,30,4))\n",
        "p=[1,2]\n",
        "\n",
        "hyperparameters = dict(n_neighbors=n_neighbors, p=p)\n",
        "knn = KNeighborsClassifier()\n",
        "clf = GridSearchCV(knn, hyperparameters, cv=5)\n",
        "best_model = clf.fit(X_train, y_train)\n",
        "print('Best p:', best_model.best_estimator_.get_params()['p'])\n",
        "print('Best n_neighbors:', best_model.best_estimator_.get_params()['n_neighbors'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-sVjm43vhScw",
        "outputId": "9555a8b6-c0fb-44dc-d575-9aff2ffa3c6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best p: 2\n",
            "Best n_neighbors: 29\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "knn = KNeighborsClassifier(p=2, n_neighbors=29)\n",
        "knn.fit(X_train, y_train)\n",
        "y_pred = knn.predict(X_test)\n",
        "pred = [round(value) for value in y_pred]\n",
        "knn_accuracy = accuracy_score(y_test, pred)\n",
        "print(\"Accuracy: %.2f%%\" % (knn_accuracy * 100.0))\n",
        "print(\"Classification Report: \\n\")\n",
        "print(classification_report(y_test, pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XVcroNoruZTY",
        "outputId": "117f7001-efe7-4919-92a9-fcc3b918e0e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 37.03%\n",
            "Classification Report: \n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.55      0.11      0.18        57\n",
            "           1       0.50      0.20      0.29       203\n",
            "           2       0.50      0.09      0.15        69\n",
            "           3       0.61      0.20      0.30       206\n",
            "           4       0.00      0.00      0.00        13\n",
            "           5       0.00      0.00      0.00        14\n",
            "           6       0.00      0.00      0.00        12\n",
            "           7       0.00      0.00      0.00        27\n",
            "           8       0.31      0.54      0.39       441\n",
            "           9       0.32      0.77      0.45       550\n",
            "          10       0.64      0.21      0.32       327\n",
            "          11       0.65      0.31      0.42       391\n",
            "          12       0.40      0.04      0.07        50\n",
            "          13       0.00      0.00      0.00        81\n",
            "          14       0.20      0.02      0.03        61\n",
            "          15       0.70      0.16      0.26       101\n",
            "\n",
            "    accuracy                           0.37      2603\n",
            "   macro avg       0.34      0.16      0.18      2603\n",
            "weighted avg       0.45      0.37      0.33      2603\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**XGBoost Classifier**"
      ],
      "metadata": {
        "id": "r2ScILlWxP5I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBClassifier\n",
        "xgb = XGBClassifier()\n",
        "xgb.fit(X_train, y_train)\n",
        "y_pred = xgb.predict(X_test)\n",
        "pred = [round(value) for value in y_pred]\n",
        "xgb_accuracy = accuracy_score(y_test, pred)\n",
        "print(\"Accuracy: %.2f%%\" % (xgb_accuracy * 100.0))\n",
        "print(\"Classification Report: \\n\")\n",
        "print(classification_report(y_test, pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iFTSxQv_uis0",
        "outputId": "e8b7aa5e-9c9f-48b8-f0df-ba2e4419fc60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 57.01%\n",
            "Classification Report: \n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.59      0.42      0.49        57\n",
            "           1       0.60      0.50      0.55       203\n",
            "           2       0.51      0.28      0.36        69\n",
            "           3       0.55      0.51      0.53       206\n",
            "           4       0.00      0.00      0.00        13\n",
            "           5       0.00      0.00      0.00        14\n",
            "           6       0.00      0.00      0.00        12\n",
            "           7       0.00      0.00      0.00        27\n",
            "           8       0.57      0.65      0.61       441\n",
            "           9       0.57      0.73      0.64       550\n",
            "          10       0.56      0.57      0.57       327\n",
            "          11       0.57      0.69      0.62       391\n",
            "          12       0.36      0.10      0.16        50\n",
            "          13       0.54      0.25      0.34        81\n",
            "          14       0.52      0.25      0.33        61\n",
            "          15       0.67      0.49      0.56       101\n",
            "\n",
            "    accuracy                           0.57      2603\n",
            "   macro avg       0.41      0.34      0.36      2603\n",
            "weighted avg       0.55      0.57      0.55      2603\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**SVM**"
      ],
      "metadata": {
        "id": "xHC772nZxg7x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "svm = SVC()\n",
        "svm.fit(X_train, y_train)\n",
        "y_pred = svm.predict(X_test)\n",
        "pred = [round(value) for value in y_pred]\n",
        "svm_accuracy = accuracy_score(y_test, pred)\n",
        "print(\"Accuracy: %.2f%%\" % (svm_accuracy * 100.0))\n",
        "print(\"Classification Report: \\n\")\n",
        "print(classification_report(y_test, pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GCN0awDIwucm",
        "outputId": "76c7f4a9-b701-4667-be6b-95346f9699a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 53.36%\n",
            "Classification Report: \n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.75      0.16      0.26        57\n",
            "           1       0.66      0.40      0.50       203\n",
            "           2       0.57      0.12      0.19        69\n",
            "           3       0.58      0.41      0.48       206\n",
            "           4       0.00      0.00      0.00        13\n",
            "           5       0.00      0.00      0.00        14\n",
            "           6       0.00      0.00      0.00        12\n",
            "           7       0.00      0.00      0.00        27\n",
            "           8       0.53      0.61      0.57       441\n",
            "           9       0.50      0.79      0.61       550\n",
            "          10       0.53      0.55      0.54       327\n",
            "          11       0.53      0.72      0.61       391\n",
            "          12       1.00      0.02      0.04        50\n",
            "          13       0.67      0.02      0.05        81\n",
            "          14       0.45      0.08      0.14        61\n",
            "          15       0.69      0.33      0.44       101\n",
            "\n",
            "    accuracy                           0.53      2603\n",
            "   macro avg       0.47      0.26      0.28      2603\n",
            "weighted avg       0.55      0.53      0.50      2603\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Deep Learning Models"
      ],
      "metadata": {
        "id": "8xrtVOSI0Vwf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Neural Network**"
      ],
      "metadata": {
        "id": "orzs8lI60dqo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Sequential\n",
        "from keras import layers,optimizers,callbacks\n",
        "import tensorflow as tf\n",
        "import keras"
      ],
      "metadata": {
        "id": "gwK4S6gI0zCZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Initializing the model\n",
        "\n",
        "model = Sequential()\n",
        "model.add(keras.layers.Dense(512,input_shape = (1000,),activation='relu'))\n",
        "model.add(keras.layers.Dense(256,activation='relu'))\n",
        "model.add(keras.layers.Dense(128,activation='relu'))\n",
        "model.add(keras.layers.Dense(64,activation='relu'))\n",
        "model.add(keras.layers.Dropout(0.07))\n",
        "model.add(keras.layers.Dense(32,activation='relu'))\n",
        "model.add(keras.layers.Dense(1, activation = 'softmax'))\n",
        "print(model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ddo9hEl-zftx",
        "outputId": "3e21a200-7940-4468-fe20-54f0846e9148"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense (Dense)               (None, 512)               512512    \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 256)               131328    \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 128)               32896     \n",
            "                                                                 \n",
            " dense_3 (Dense)             (None, 64)                8256      \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 64)                0         \n",
            "                                                                 \n",
            " dense_4 (Dense)             (None, 32)                2080      \n",
            "                                                                 \n",
            " dense_5 (Dense)             (None, 1)                 33        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 687,105\n",
            "Trainable params: 687,105\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Model's structure visualization\n",
        "tf.keras.utils.plot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 865
        },
        "id": "JrHWzSy5zxio",
        "outputId": "b7865e9a-0422-4b58-9a23-0de8dcbbf728"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.Image object>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Compile & train   \n",
        "model.compile(loss='categorical_crossentropy', \n",
        "                optimizer='adam', \n",
        "                metrics=['accuracy'])\n",
        "\n",
        "history = model.fit(X_train, y_train, \n",
        "                    epochs=5, batch_size = 30, \n",
        "                    validation_data = (X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-LS7rHDyz4SA",
        "outputId": "47d089a0-c601-4e30-e1dc-30c8b8a76244"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "203/203 [==============================] - 3s 9ms/step - loss: 0.0000e+00 - accuracy: 0.0777 - val_loss: 0.0000e+00 - val_accuracy: 0.0780\n",
            "Epoch 2/5\n",
            "203/203 [==============================] - 2s 9ms/step - loss: 0.0000e+00 - accuracy: 0.0777 - val_loss: 0.0000e+00 - val_accuracy: 0.0780\n",
            "Epoch 3/5\n",
            "203/203 [==============================] - 2s 9ms/step - loss: 0.0000e+00 - accuracy: 0.0777 - val_loss: 0.0000e+00 - val_accuracy: 0.0780\n",
            "Epoch 4/5\n",
            "203/203 [==============================] - 2s 10ms/step - loss: 0.0000e+00 - accuracy: 0.0777 - val_loss: 0.0000e+00 - val_accuracy: 0.0780\n",
            "Epoch 5/5\n",
            "203/203 [==============================] - 2s 8ms/step - loss: 0.0000e+00 - accuracy: 0.0777 - val_loss: 0.0000e+00 - val_accuracy: 0.0780\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot history: Loss\n",
        "plt.plot(history.history['loss'], label='Loss (training data)')\n",
        "plt.plot(history.history['val_loss'], label='Loss (validation data)')\n",
        "plt.title('Loss for train and validation')\n",
        "plt.ylabel('Loss value')\n",
        "plt.xlabel('No. epoch')\n",
        "plt.legend(loc=\"upper left\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "gcvxE_XCzptd",
        "outputId": "de2ee907-e8a6-4216-c571-8b9498a56a38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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HgB9+vRh7Nix3HXXXbRsmcn/gwcP5rzzzmPy5MmsWbOmYn25VatW0bFjxxqPeeSRR7LrrrsCmd85/PKXv6RPnz4MHz6cd955p+LKIdugQYPo3r07O+ywA/369WPZsmXblNlxxx0ZMWIEAAcddFBFmaeeeoqTTz4ZgO9+97tVxjR//nyOP/54dt55Z9q3b8/IkSMrtr300ksceuih9O7dm2nTprF48eIq66ip3O677867775bY7uYWfV8BZIlzZVCQ3vkkUeYN28eDz30EJdffjkvvvgiEyZM4Nhjj+XRRx9l8ODBzJo1i/33379inzZt2tT6m4Vddtml4vm0adNYuXIlCxYsoFWrVhQVFVW5/0477VTxvEWLFlXeP2nVqlXFlUt1ZdI4/fTTeeCBB+jbty+33347c+bMqXO5TZs20aZNm3qJx6w58hVII9ShQwc6derE/PnzAbjzzjsZOnQon3/+OcuXL+ewww7jqquuYu3ataxfv56lS5fSu3dvfv7znzNw4EBeffXVrerr1KkTW7ZsqUgC7dq1q/I+Sbm1a9ey++6706pVK2bPns3bb1c5kvN2KSkp4c9//jMA06dPr7LMkCFDeOCBB9i4cSPr1q3joYceqti2bt06unXrxubNm5k2bVrF+srnVl05gNdff50DDzywPk/LrFlxAmkENmzYQPfu3Sse11xzDVOnTuWCCy6gT58+LFq0iIsuuogtW7bwve99j969e9O/f3/OOeccOnbsyKRJkzjwwAPp06cPrVq14phjjtnmGEcddRRPPPEEkOkGa9GiBX379uXaa6/dpuzYsWMpLS2ld+/e3HHHHVtdzdSXSZMmcc0119CnTx+WLFlChw4dtikzYMAARo8eTd++fTnmmGMYOHBgxbbLLruMb37zmwwePHir+MaMGcPvfvc7+vfvz9KlS6stB/Dkk09y5JFH1vu5mTUXKv/mTHNQXFwclSeUeuWVVzjggAMKFFHDWbhwIddeey133nlnoUMBMkmzTZs2SGL69On88Y9/3OrbXvn2/PPPc80112xXezSXvx0zSQsiorjyet8DaSYGDBjAYYcdxpYtW2jRokWhw2HBggWcddZZRAQdO3Zs8B/1rVq1issuu6xBj2n2ZeME0ox8//vfL3QIFQ499FBeeOGFgh3fXVdm28/3QMzMLBUnEDMzS8UJxMzMUnECMTOz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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot history: Accuracy\n",
        "plt.plot(history.history['accuracy'], label='Acc (training data)')\n",
        "plt.plot(history.history['val_accuracy'], label='Acc (validation data)')\n",
        "plt.title('Model accuracy')\n",
        "plt.ylabel('Acc %')\n",
        "plt.xlabel('No. epoch')\n",
        "plt.legend(loc=\"upper left\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "-YRN0QY4zsjb",
        "outputId": "d86f04da-bbec-4b2b-8174-7f13e54fb241"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Comparing Algorithms**"
      ],
      "metadata": {
        "id": "SxDwNviKIu7F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "accuracies = { \"Random Forest\":rf_accuracy*100,\n",
        "              \"XG Boost\":\txgb_accuracy*100,\n",
        "              \"Logistic Regression\":lc_accuracy*100,\n",
        "              \"KNN\":knn_accuracy*100,\n",
        "              \"SVM\":svm_accuracy*100,\n",
        "              \"CNN\":7.8\n",
        "              }\n",
        "pd.DataFrame.from_dict(accuracies, orient='index', columns=['Accuracies(%)'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "j7WF1I3pI0Qw",
        "outputId": "a9cfe08b-cc43-4e35-9e27-ba7fc1b512f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     Accuracies(%)\n",
              "Random Forest            51.940069\n",
              "XG Boost                 57.011141\n",
              "Logistic Regression      54.053016\n",
              "KNN                      37.034191\n",
              "SVM                      53.361506\n",
              "CNN                       7.800000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4004878-0178-43ad-934b-8cbc420020d8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Accuracies(%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Random Forest</th>\n",
              "      <td>51.940069</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>XG Boost</th>\n",
              "      <td>57.011141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Logistic Regression</th>\n",
              "      <td>54.053016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KNN</th>\n",
              "      <td>37.034191</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SVM</th>\n",
              "      <td>53.361506</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CNN</th>\n",
              "      <td>7.800000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4004878-0178-43ad-934b-8cbc420020d8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e4004878-0178-43ad-934b-8cbc420020d8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e4004878-0178-43ad-934b-8cbc420020d8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    }
  ]
}